define(['dart_sdk', 'packages/xml/src/xml/utils/node_list.dart', 'packages/webfeed/util/iterable.dart', 'packages/xml/src/xml/navigation/find.dart', 'packages/webfeed/domain/rss_item.dart', 'packages/webfeed/domain/rss_image.dart', 'packages/webfeed/domain/rss_cloud.dart', 'packages/webfeed/domain/rss_category.dart', 'packages/webfeed/domain/dublin_core/dublin_core.dart', 'packages/webfeed/domain/itunes/itunes.dart', 'packages/webfeed/domain/syndication/syndication.dart'], (function load__packages__webfeed__domain__rss_feed_dart(dart_sdk, packages__xml__src__xml__utils__node_list$46dart, packages__webfeed__util__iterable$46dart, packages__xml__src__xml__navigation__find$46dart, packages__webfeed__domain__rss_item$46dart, packages__webfeed__domain__rss_image$46dart, packages__webfeed__domain__rss_cloud$46dart, packages__webfeed__domain__rss_category$46dart, packages__webfeed__domain__dublin_core__dublin_core$46dart, packages__webfeed__domain__itunes__itunes$46dart, packages__webfeed__domain__syndication__syndication$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const document$ = packages__xml__src__xml__utils__node_list$46dart.src__xml__nodes__document;
  const element = packages__xml__src__xml__utils__node_list$46dart.src__xml__nodes__element;
  const iterable = packages__webfeed__util__iterable$46dart.util__iterable;
  const find = packages__xml__src__xml__navigation__find$46dart.src__xml__navigation__find;
  const rss_item = packages__webfeed__domain__rss_item$46dart.domain__rss_item;
  const rss_image = packages__webfeed__domain__rss_image$46dart.domain__rss_image;
  const rss_cloud = packages__webfeed__domain__rss_cloud$46dart.domain__rss_cloud;
  const rss_category = packages__webfeed__domain__rss_category$46dart.domain__rss_category;
  const dublin_core = packages__webfeed__domain__dublin_core__dublin_core$46dart.domain__dublin_core__dublin_core;
  const itunes = packages__webfeed__domain__itunes__itunes$46dart.domain__itunes__itunes;
  const syndication = packages__webfeed__domain__syndication__syndication$46dart.domain__syndication__syndication;
  var rss_feed = Object.create(dart.library);
  var $map = dartx.map;
  var $toList = dartx.toList;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    XmlElementToRssItem: () => (T.XmlElementToRssItem = dart.constFn(dart.fnType(rss_item.RssItem, [element.XmlElement])))(),
    XmlElementToRssImage: () => (T.XmlElementToRssImage = dart.constFn(dart.fnType(rss_image.RssImage, [element.XmlElement])))(),
    XmlElementToRssCloud: () => (T.XmlElementToRssCloud = dart.constFn(dart.fnType(rss_cloud.RssCloud, [element.XmlElement])))(),
    XmlElementToRssCategory: () => (T.XmlElementToRssCategory = dart.constFn(dart.fnType(rss_category.RssCategory, [element.XmlElement])))(),
    XmlElementToString: () => (T.XmlElementToString = dart.constFn(dart.fnType(core.String, [element.XmlElement])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    XmlElementToint: () => (T.XmlElementToint = dart.constFn(dart.fnType(core.int, [element.XmlElement])))(),
    JSArrayOfint: () => (T.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  var C = [];
  var I = [
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/webfeed-0.7.0/lib/domain/rss_feed.dart",
    "package:webfeed/domain/rss_feed.dart"
  ];
  var title$ = dart.privateName(rss_feed, "RssFeed.title");
  var author$ = dart.privateName(rss_feed, "RssFeed.author");
  var description$ = dart.privateName(rss_feed, "RssFeed.description");
  var link$ = dart.privateName(rss_feed, "RssFeed.link");
  var items$ = dart.privateName(rss_feed, "RssFeed.items");
  var image$ = dart.privateName(rss_feed, "RssFeed.image");
  var cloud$ = dart.privateName(rss_feed, "RssFeed.cloud");
  var categories$ = dart.privateName(rss_feed, "RssFeed.categories");
  var skipDays$ = dart.privateName(rss_feed, "RssFeed.skipDays");
  var skipHours$ = dart.privateName(rss_feed, "RssFeed.skipHours");
  var lastBuildDate$ = dart.privateName(rss_feed, "RssFeed.lastBuildDate");
  var language$ = dart.privateName(rss_feed, "RssFeed.language");
  var generator$ = dart.privateName(rss_feed, "RssFeed.generator");
  var copyright$ = dart.privateName(rss_feed, "RssFeed.copyright");
  var docs$ = dart.privateName(rss_feed, "RssFeed.docs");
  var managingEditor$ = dart.privateName(rss_feed, "RssFeed.managingEditor");
  var rating$ = dart.privateName(rss_feed, "RssFeed.rating");
  var webMaster$ = dart.privateName(rss_feed, "RssFeed.webMaster");
  var ttl$ = dart.privateName(rss_feed, "RssFeed.ttl");
  var dc$ = dart.privateName(rss_feed, "RssFeed.dc");
  var itunes$ = dart.privateName(rss_feed, "RssFeed.itunes");
  var syndication$ = dart.privateName(rss_feed, "RssFeed.syndication");
  rss_feed.RssFeed = class RssFeed extends core.Object {
    get title() {
      return this[title$];
    }
    set title(value) {
      super.title = value;
    }
    get author() {
      return this[author$];
    }
    set author(value) {
      super.author = value;
    }
    get description() {
      return this[description$];
    }
    set description(value) {
      super.description = value;
    }
    get link() {
      return this[link$];
    }
    set link(value) {
      super.link = value;
    }
    get items() {
      return this[items$];
    }
    set items(value) {
      super.items = value;
    }
    get image() {
      return this[image$];
    }
    set image(value) {
      super.image = value;
    }
    get cloud() {
      return this[cloud$];
    }
    set cloud(value) {
      super.cloud = value;
    }
    get categories() {
      return this[categories$];
    }
    set categories(value) {
      super.categories = value;
    }
    get skipDays() {
      return this[skipDays$];
    }
    set skipDays(value) {
      super.skipDays = value;
    }
    get skipHours() {
      return this[skipHours$];
    }
    set skipHours(value) {
      super.skipHours = value;
    }
    get lastBuildDate() {
      return this[lastBuildDate$];
    }
    set lastBuildDate(value) {
      super.lastBuildDate = value;
    }
    get language() {
      return this[language$];
    }
    set language(value) {
      super.language = value;
    }
    get generator() {
      return this[generator$];
    }
    set generator(value) {
      super.generator = value;
    }
    get copyright() {
      return this[copyright$];
    }
    set copyright(value) {
      super.copyright = value;
    }
    get docs() {
      return this[docs$];
    }
    set docs(value) {
      super.docs = value;
    }
    get managingEditor() {
      return this[managingEditor$];
    }
    set managingEditor(value) {
      super.managingEditor = value;
    }
    get rating() {
      return this[rating$];
    }
    set rating(value) {
      super.rating = value;
    }
    get webMaster() {
      return this[webMaster$];
    }
    set webMaster(value) {
      super.webMaster = value;
    }
    get ttl() {
      return this[ttl$];
    }
    set ttl(value) {
      super.ttl = value;
    }
    get dc() {
      return this[dc$];
    }
    set dc(value) {
      super.dc = value;
    }
    get itunes() {
      return this[itunes$];
    }
    set itunes(value) {
      super.itunes = value;
    }
    get syndication() {
      return this[syndication$];
    }
    set syndication(value) {
      super.syndication = value;
    }
    static parse(xmlString) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10, t0$11, t0$12, t0$13, t0$14, t0$15, t0$16, t0$17, t0$18;
      if (xmlString == null) dart.nullFailed(I[0], 63, 32, "xmlString");
      let document = document$.XmlDocument.parse(xmlString);
      let rss = iterable['WebFeedIterable|get#firstOrNull'](element.XmlElement, find['XmlFindExtension|findElements'](document, "rss"));
      let rdf = iterable['WebFeedIterable|get#firstOrNull'](element.XmlElement, find['XmlFindExtension|findElements'](document, "rdf:RDF"));
      if (rss == null && rdf == null) {
        dart.throw(new core.ArgumentError.new("not a rss feed"));
      }
      let channelElement = iterable['WebFeedIterable|get#firstOrNull'](element.XmlElement, find['XmlFindExtension|findElements'](dart.nullCheck((t0 = rss, t0 == null ? rdf : t0)), "channel"));
      if (channelElement == null) {
        dart.throw(new core.ArgumentError.new("channel not found"));
      }
      return new rss_feed.RssFeed.new({title: (t0$ = iterable['WebFeedIterable|get#firstOrNull'](element.XmlElement, find['XmlFindExtension|findElements'](channelElement, "title")), t0$ == null ? null : t0$.text), author: (t0$0 = iterable['WebFeedIterable|get#firstOrNull'](element.XmlElement, find['XmlFindExtension|findElements'](channelElement, "author")), t0$0 == null ? null : t0$0.text), description: (t0$1 = iterable['WebFeedIterable|get#firstOrNull'](element.XmlElement, find['XmlFindExtension|findElements'](channelElement, "description")), t0$1 == null ? null : t0$1.text), link: (t0$2 = iterable['WebFeedIterable|get#firstOrNull'](element.XmlElement, find['XmlFindExtension|findElements'](channelElement, "link")), t0$2 == null ? null : t0$2.text), items: find['XmlFindExtension|findElements']((t0$3 = rdf, t0$3 == null ? channelElement : t0$3), "item")[$map](rss_item.RssItem, dart.fn(e => {
          if (e == null) dart.nullFailed(I[0], 81, 17, "e");
          return rss_item.RssItem.parse(e);
        }, T.XmlElementToRssItem()))[$toList](), image: iterable['WebFeedIterable|get#firstOrNull'](rss_image.RssImage, find['XmlFindExtension|findElements']((t0$4 = rdf, t0$4 == null ? channelElement : t0$4), "image")[$map](rss_image.RssImage, dart.fn(e => {
          if (e == null) dart.nullFailed(I[0], 85, 17, "e");
          return rss_image.RssImage.parse(e);
        }, T.XmlElementToRssImage()))), cloud: iterable['WebFeedIterable|get#firstOrNull'](rss_cloud.RssCloud, find['XmlFindExtension|findElements'](channelElement, "cloud")[$map](rss_cloud.RssCloud, dart.fn(e => {
          if (e == null) dart.nullFailed(I[0], 89, 17, "e");
          return rss_cloud.RssCloud.parse(e);
        }, T.XmlElementToRssCloud()))), categories: find['XmlFindExtension|findElements'](channelElement, "category")[$map](rss_category.RssCategory, dart.fn(e => {
          if (e == null) dart.nullFailed(I[0], 93, 17, "e");
          return rss_category.RssCategory.parse(e);
        }, T.XmlElementToRssCategory()))[$toList](), skipDays: (t0$6 = (t0$5 = iterable['WebFeedIterable|get#firstOrNull'](element.XmlElement, find['XmlFindExtension|findElements'](channelElement, "skipDays")), t0$5 == null ? null : find['XmlFindExtension|findAllElements'](t0$5, "day")[$map](core.String, dart.fn(e => {
          if (e == null) dart.nullFailed(I[0], 99, 21, "e");
          return e.text;
        }, T.XmlElementToString()))[$toList]()), t0$6 == null ? T.JSArrayOfString().of([]) : t0$6), skipHours: (t0$8 = (t0$7 = iterable['WebFeedIterable|get#firstOrNull'](element.XmlElement, find['XmlFindExtension|findElements'](channelElement, "skipHours")), t0$7 == null ? null : find['XmlFindExtension|findAllElements'](t0$7, "hour")[$map](core.int, dart.fn(e => {
          let t1;
          if (e == null) dart.nullFailed(I[0], 106, 21, "e");
          t1 = core.int.tryParse(e.text);
          return t1 == null ? 0 : t1;
        }, T.XmlElementToint()))[$toList]()), t0$8 == null ? T.JSArrayOfint().of([]) : t0$8), lastBuildDate: (t0$9 = iterable['WebFeedIterable|get#firstOrNull'](element.XmlElement, find['XmlFindExtension|findElements'](channelElement, "lastBuildDate")), t0$9 == null ? null : t0$9.text), language: (t0$10 = iterable['WebFeedIterable|get#firstOrNull'](element.XmlElement, find['XmlFindExtension|findElements'](channelElement, "language")), t0$10 == null ? null : t0$10.text), generator: (t0$11 = iterable['WebFeedIterable|get#firstOrNull'](element.XmlElement, find['XmlFindExtension|findElements'](channelElement, "generator")), t0$11 == null ? null : t0$11.text), copyright: (t0$12 = iterable['WebFeedIterable|get#firstOrNull'](element.XmlElement, find['XmlFindExtension|findElements'](channelElement, "copyright")), t0$12 == null ? null : t0$12.text), docs: (t0$13 = iterable['WebFeedIterable|get#firstOrNull'](element.XmlElement, find['XmlFindExtension|findElements'](channelElement, "docs")), t0$13 == null ? null : t0$13.text), managingEditor: (t0$14 = iterable['WebFeedIterable|get#firstOrNull'](element.XmlElement, find['XmlFindExtension|findElements'](channelElement, "managingEditor")), t0$14 == null ? null : t0$14.text), rating: (t0$15 = iterable['WebFeedIterable|get#firstOrNull'](element.XmlElement, find['XmlFindExtension|findElements'](channelElement, "rating")), t0$15 == null ? null : t0$15.text), webMaster: (t0$16 = iterable['WebFeedIterable|get#firstOrNull'](element.XmlElement, find['XmlFindExtension|findElements'](channelElement, "webMaster")), t0$16 == null ? null : t0$16.text), ttl: core.int.tryParse((t0$18 = (t0$17 = iterable['WebFeedIterable|get#firstOrNull'](element.XmlElement, find['XmlFindExtension|findElements'](channelElement, "ttl")), t0$17 == null ? null : t0$17.text), t0$18 == null ? "0" : t0$18)), dc: dublin_core.DublinCore.parse(channelElement), itunes: itunes.Itunes.parse(channelElement), syndication: syndication.Syndication.parse(channelElement)});
    }
  };
  (rss_feed.RssFeed.new = function(opts) {
    let title = opts && 'title' in opts ? opts.title : null;
    let author = opts && 'author' in opts ? opts.author : null;
    let description = opts && 'description' in opts ? opts.description : null;
    let link = opts && 'link' in opts ? opts.link : null;
    let items = opts && 'items' in opts ? opts.items : null;
    let image = opts && 'image' in opts ? opts.image : null;
    let cloud = opts && 'cloud' in opts ? opts.cloud : null;
    let categories = opts && 'categories' in opts ? opts.categories : null;
    let skipDays = opts && 'skipDays' in opts ? opts.skipDays : null;
    let skipHours = opts && 'skipHours' in opts ? opts.skipHours : null;
    let lastBuildDate = opts && 'lastBuildDate' in opts ? opts.lastBuildDate : null;
    let language = opts && 'language' in opts ? opts.language : null;
    let generator = opts && 'generator' in opts ? opts.generator : null;
    let copyright = opts && 'copyright' in opts ? opts.copyright : null;
    let docs = opts && 'docs' in opts ? opts.docs : null;
    let managingEditor = opts && 'managingEditor' in opts ? opts.managingEditor : null;
    let rating = opts && 'rating' in opts ? opts.rating : null;
    let webMaster = opts && 'webMaster' in opts ? opts.webMaster : null;
    let ttl = opts && 'ttl' in opts ? opts.ttl : null;
    let dc = opts && 'dc' in opts ? opts.dc : null;
    let itunes = opts && 'itunes' in opts ? opts.itunes : null;
    let syndication = opts && 'syndication' in opts ? opts.syndication : null;
    this[title$] = title;
    this[author$] = author;
    this[description$] = description;
    this[link$] = link;
    this[items$] = items;
    this[image$] = image;
    this[cloud$] = cloud;
    this[categories$] = categories;
    this[skipDays$] = skipDays;
    this[skipHours$] = skipHours;
    this[lastBuildDate$] = lastBuildDate;
    this[language$] = language;
    this[generator$] = generator;
    this[copyright$] = copyright;
    this[docs$] = docs;
    this[managingEditor$] = managingEditor;
    this[rating$] = rating;
    this[webMaster$] = webMaster;
    this[ttl$] = ttl;
    this[dc$] = dc;
    this[itunes$] = itunes;
    this[syndication$] = syndication;
    ;
  }).prototype = rss_feed.RssFeed.prototype;
  dart.addTypeTests(rss_feed.RssFeed);
  dart.addTypeCaches(rss_feed.RssFeed);
  dart.setLibraryUri(rss_feed.RssFeed, I[1]);
  dart.setFieldSignature(rss_feed.RssFeed, () => ({
    __proto__: dart.getFields(rss_feed.RssFeed.__proto__),
    title: dart.finalFieldType(dart.nullable(core.String)),
    author: dart.finalFieldType(dart.nullable(core.String)),
    description: dart.finalFieldType(dart.nullable(core.String)),
    link: dart.finalFieldType(dart.nullable(core.String)),
    items: dart.finalFieldType(dart.nullable(core.List$(rss_item.RssItem))),
    image: dart.finalFieldType(dart.nullable(rss_image.RssImage)),
    cloud: dart.finalFieldType(dart.nullable(rss_cloud.RssCloud)),
    categories: dart.finalFieldType(dart.nullable(core.List$(rss_category.RssCategory))),
    skipDays: dart.finalFieldType(dart.nullable(core.List$(core.String))),
    skipHours: dart.finalFieldType(dart.nullable(core.List$(core.int))),
    lastBuildDate: dart.finalFieldType(dart.nullable(core.String)),
    language: dart.finalFieldType(dart.nullable(core.String)),
    generator: dart.finalFieldType(dart.nullable(core.String)),
    copyright: dart.finalFieldType(dart.nullable(core.String)),
    docs: dart.finalFieldType(dart.nullable(core.String)),
    managingEditor: dart.finalFieldType(dart.nullable(core.String)),
    rating: dart.finalFieldType(dart.nullable(core.String)),
    webMaster: dart.finalFieldType(dart.nullable(core.String)),
    ttl: dart.finalFieldType(dart.nullable(core.int)),
    dc: dart.finalFieldType(dart.nullable(dublin_core.DublinCore)),
    itunes: dart.finalFieldType(dart.nullable(itunes.Itunes)),
    syndication: dart.finalFieldType(dart.nullable(syndication.Syndication))
  }));
  dart.trackLibraries("packages/webfeed/domain/rss_feed.dart", {
    "package:webfeed/domain/rss_feed.dart": rss_feed
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["rss_feed.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAagB;;;;;;IACA;;;;;;IACA;;;;;;IACA;;;;;;IACO;;;;;;IAEL;;;;;;IACA;;;;;;IACS;;;;;;IACL;;;;;;IACH;;;;;;IACH;;;;;;IACA;;;;;;IACA;;;;;;IACA;;;;;;IACA;;;;;;IACA;;;;;;IACA;;;;;;IACA;;;;;;IACH;;;;;;IACO;;;;;;IACJ;;;;;;IACK;;;;;;iBA2BU;;;AACvB,qBAAuB,4BAAM,SAAS;AACtC,gBAAmC,gEAApB,sCAAT,QAAQ,EAAc;AAC5B,gBAAuC,gEAAxB,sCAAT,QAAQ,EAAc;AAChC,UAAI,AAAI,GAAD,YAAY,AAAI,GAAD;AACiB,QAArC,WAAM,2BAAc;;AAElB,2BAAuD,gEAAxB,sCAAF,gBAAP,KAAJ,GAAG,EAAH,aAAO,GAAG,SAAgB;AAChD,UAAI,AAAe,cAAD;AACwB,QAAxC,WAAM,2BAAc;;AAEtB,YAAO,yCACuC,gEAAtB,sCAAf,cAAc,EAAc,yBAAS,OAAa,2BACX,gEAAvB,sCAAf,cAAc,EAAc,2BAAU,OAAa,iCACH,gEAA5B,sCAAf,cAAc,EAAc,gCAAe,OAAa,0BAC3B,gEAArB,sCAAf,cAAc,EAAc,yBAAQ,OAAa,mBAElD,AACA,AACA,uCAHO,OAAJ,GAAG,EAAH,eAAO,cAAc,UACX,gCACT;cAAC;AAAM,gBAAQ,wBAAM,CAAC;wDAK1B,gEAFA,AACA,uCAFO,OAAJ,GAAG,EAAH,eAAO,cAAc,UACX,mCACT;cAAC;AAAM,gBAAS,0BAAM,CAAC;+CAK3B,gEAFA,AACA,sCAFE,cAAc,EACH,mCACT;cAAC;AAAM,gBAAS,0BAAM,CAAC;oDAG3B,AACA,AACA,sCAHO,cAAc,EACR,4CACT;cAAC;AAAM,gBAAY,gCAAM,CAAC;gEAOjB,eAHT,gEADA,sCADC,cAAc,EACF,6BACb,OACC,AACD,AACA,+CAFiB,0BACb;cAAC;AAAM,gBAAA,AAAE,EAAD;iDAFZ,eAIL,gDAMc,eAHT,gEADA,sCADE,cAAc,EACH,8BACb,OACC,AACD,AACA,+CAFiB,wBACb,QAAC;;;AAAM,eAAI,kBAAS,AAAE,CAAD;gBAAV,cAAoB;8CAFnC,eAIL,wDAE6C,gEAA9B,sCAAf,cAAc,EAAc,kCAAiB,OAAa,+BACZ,gEAAzB,sCAAf,cAAc,EAAc,8BAAY,OAAa,iCACX,gEAA1B,sCAAf,cAAc,EAAc,+BAAa,OAAa,iCACb,gEAA1B,sCAAf,cAAc,EAAc,+BAAa,OAAa,4BACvB,gEAArB,sCAAf,cAAc,EAAc,0BAAQ,OAAa,sCAEL,gEAA/B,sCAAf,cAAc,EAAc,oCAAkB,OAAa,8BACjB,gEAAvB,sCAAf,cAAc,EAAc,4BAAU,OAAa,iCACP,gEAA1B,sCAAf,cAAc,EAAc,+BAAa,OAAa,kBACxD,mBACgD,iBAAlB,gEAApB,sCAAf,cAAc,EAAc,yBAAO,OAAa,aAAb,gBAAqB,mBAC7C,6BAAM,cAAc,WACpB,oBAAM,cAAc,gBACV,8BAAM,cAAc;IAEjD;;;QAtFO;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IArBA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;EACL","file":"../../../../../../../../../D:/packages/webfeed/domain/rss_feed.dart.lib.js"}');
  // Exports:
  return {
    domain__rss_feed: rss_feed
  };
}));

//# sourceMappingURL=rss_feed.dart.lib.js.map
